import requests
from bs4 import BeautifulSoup

# Common payloads for SQL Injection, XSS, and CSRF
payloads = {
    "sql_injection": ["'", '"', "OR 1=1", "--"],
    "xss": ['<script>alert("XSS")</script>', '<img src="x" onerror="alert(\'XSS\')">'],
    "csrf": ["<form method='POST' action='URL_TO_ATTACK'>"]
}

def scan_sql_injection(url):
    vulnerable = False
    for payload in payloads["sql_injection"]:
        test_url = f"{url}?id={payload}"
        try:
            response = requests.get(test_url)
            if "SQL" in response.text or "syntax" in response.text:
                vulnerable = True
                break
        except requests.RequestException as e:
            print(f"Request failed: {e}")
    return vulnerable

def scan_xss(url):
    vulnerable = False
    for payload in payloads["xss"]:
        test_url = f"{url}?q={payload}"
        try:
            response = requests.get(test_url)
            if payload in response.text:
                vulnerable = True
                break
        except requests.RequestException as e:
            print(f"Request failed: {e}")
    return vulnerable

def scan_csrf(url):
    # CSRF vulnerability check logic placeholder
    # This requires more complex handling as CSRF typically involves forms and session management
    return False

def generate_report(results):
    with open('templates/report.html', 'w') as report:
        report.write("<html><head><link rel='stylesheet' href='/static/styles.css'></head><body>")
        report.write("<h1>Vulnerability Report</h1>")
        for url, result in results.items():
            report.write(f"<h2>{url}</h2>")
            report.write("<ul>")
            for vuln, status in result.items():
                report.write(f"<li>{vuln}: {'Vulnerable' if status else 'Not Vulnerable'}</li>")
            report.write("</ul>")
        report.write("</body></html>")

def main(urls):
    results = {}
    for url in urls:
        results[url] = {
            "SQL Injection": scan_sql_injection(url),
            "XSS": scan_xss(url),
            "CSRF": scan_csrf(url)
        }
    generate_report(results)

if __name__ == "__main__":
    urls_to_scan = ["http://example.com"]  # Replace with actual URLs to scan
    main(urls_to_scan)
